---
description: 
globs: 
alwaysApply: true
---
---
description: Export conventions and code style standards
globs: ["**/*.ts", "**/*.tsx"]
alwaysApply: true
---

# Export Conventions

## Exports must always be at the bottom of the file as standalone statements

- Use `export { functionName }` instead of `export function functionName`
- Use `export { ComponentName }` instead of `export const ComponentName`
- **Always avoid default exports** - use named exports only
- **Separate type exports** - use `export type { }` for types and interfaces
- Group all exports in a single section at the end of the file

### Examples:

```typescript
// ❌ Don't do this
export function myFunction() {}
export const MyComponent = () => {}
export default MyComponent
export { MyInterface }

// ✅ Do this
interface MyInterface {
  id: string
}

function myFunction() {}
const MyComponent = () => {}

export { myFunction, MyComponent }
export type { MyInterface }
```

## Component Structure

- Place interfaces and types at the top after imports
- Define the main component/function
- Place exports at the bottom (separate value exports from type exports)
- Use descriptive variable names and avoid abbreviations
- Never use default exports

## Import Organization

- Group imports by type: external libraries first, then internal modules
- Use named imports when possible
- Keep imports alphabetically sorted within groups

## TypeScript & React

- Always use TypeScript for all files
- Use interfaces for component props
- Prefer `forwardRef` for components that might need ref forwarding
- Use proper typing for all function parameters and return types
