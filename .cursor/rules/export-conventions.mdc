---
description: 
globs: 
alwaysApply: true
---
---
description: File naming, export conventions, and code style standards
globs: ["**/*.ts", "**/*.tsx"]
alwaysApply: true
---

# Code Style & File Conventions

## Exports must always be at the bottom of the file as standalone statements

- Use `export { functionName }` instead of `export function functionName`
- Use `export { ComponentName }` instead of `export const ComponentName`
- **Always avoid default exports** - use named exports only
- **Separate type exports** - use `export type { }` for types and interfaces
- Group all exports in a single section at the end of the file

### Examples:

```typescript
// ❌ Don't do this
export function myFunction() {}
export const MyComponent = () => {}
export default MyComponent
export { MyInterface }

// ✅ Do this
interface MyInterface {
  id: string
}

function myFunction() {}
const MyComponent = () => {}

export { myFunction, MyComponent }
export type { MyInterface }
```

### File Naming Examples:

```
// ❌ Don't do this
Button.tsx
UserProfile.tsx
apiClient.ts
my_component.tsx

// ✅ Do this
button.tsx
user-profile.tsx
api-client.ts
my-component.tsx
```

### Import Examples:

```typescript
// ❌ Don't do this - requires index.ts barrel exports
import { Button, Tooltip } from './components/ui'

// ✅ Do this - direct imports
import { Button } from './components/ui/button'
import { Tooltip } from './components/ui/tooltip'
```

## File Naming Conventions

- **Always use kebab-case for file names** - lowercase with hyphens for spaces
- Examples: `button.tsx`, `tooltip.tsx`, `user-profile.tsx`, `api-client.ts`
- Never use PascalCase, camelCase, or snake_case for file names
- Keep file names descriptive but concise

## No Barrel Exports

- **Never create index.ts files** for re-exporting components
- Always import components directly from their specific files
- Use explicit imports: `import { Button } from './components/ui/button'`
- Avoid: `import { Button } from './components/ui'` (requires index.ts)

## Component Structure

- Place interfaces and types at the top after imports
- Define the main component/function
- Place exports at the bottom (separate value exports from type exports)
- Use descriptive variable names and avoid abbreviations
- Never use default exports

## Import Organization

- Group imports by type: external libraries first, then internal modules
- Use named imports when possible
- Keep imports alphabetically sorted within groups

## TypeScript & React

- Always use TypeScript for all files
- Use interfaces for component props
- Prefer `forwardRef` for components that might need ref forwarding
- Use proper typing for all function parameters and return types
