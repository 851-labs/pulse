/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PostsImport } from './routes/posts'
import { Route as DesignImport } from './routes/design'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as DesignIndexImport } from './routes/design.index'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as DesignTooltipImport } from './routes/design.tooltip'
import { Route as DesignButtonImport } from './routes/design.button'

// Create/Update Routes

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const DesignRoute = DesignImport.update({
  id: '/design',
  path: '/design',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)

const DesignIndexRoute = DesignIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DesignRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)

const DesignTooltipRoute = DesignTooltipImport.update({
  id: '/tooltip',
  path: '/tooltip',
  getParentRoute: () => DesignRoute,
} as any)

const DesignButtonRoute = DesignButtonImport.update({
  id: '/button',
  path: '/button',
  getParentRoute: () => DesignRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/design': {
      id: '/design'
      path: '/design'
      fullPath: '/design'
      preLoaderRoute: typeof DesignImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/design/button': {
      id: '/design/button'
      path: '/button'
      fullPath: '/design/button'
      preLoaderRoute: typeof DesignButtonImport
      parentRoute: typeof DesignImport
    }
    '/design/tooltip': {
      id: '/design/tooltip'
      path: '/tooltip'
      fullPath: '/design/tooltip'
      preLoaderRoute: typeof DesignTooltipImport
      parentRoute: typeof DesignImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsImport
    }
    '/design/': {
      id: '/design/'
      path: '/'
      fullPath: '/design/'
      preLoaderRoute: typeof DesignIndexImport
      parentRoute: typeof DesignImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsImport
    }
  }
}

// Create and export the route tree

interface DesignRouteChildren {
  DesignButtonRoute: typeof DesignButtonRoute
  DesignTooltipRoute: typeof DesignTooltipRoute
  DesignIndexRoute: typeof DesignIndexRoute
}

const DesignRouteChildren: DesignRouteChildren = {
  DesignButtonRoute: DesignButtonRoute,
  DesignTooltipRoute: DesignTooltipRoute,
  DesignIndexRoute: DesignIndexRoute,
}

const DesignRouteWithChildren =
  DesignRoute._addFileChildren(DesignRouteChildren)

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/design': typeof DesignRouteWithChildren
  '/posts': typeof PostsRouteWithChildren
  '/design/button': typeof DesignButtonRoute
  '/design/tooltip': typeof DesignTooltipRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/design/': typeof DesignIndexRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/design/button': typeof DesignButtonRoute
  '/design/tooltip': typeof DesignTooltipRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/design': typeof DesignIndexRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/design': typeof DesignRouteWithChildren
  '/posts': typeof PostsRouteWithChildren
  '/design/button': typeof DesignButtonRoute
  '/design/tooltip': typeof DesignTooltipRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/design/': typeof DesignIndexRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/design'
    | '/posts'
    | '/design/button'
    | '/design/tooltip'
    | '/posts/$postId'
    | '/design/'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/design/button'
    | '/design/tooltip'
    | '/posts/$postId'
    | '/design'
    | '/posts'
  id:
    | '__root__'
    | '/'
    | '/design'
    | '/posts'
    | '/design/button'
    | '/design/tooltip'
    | '/posts/$postId'
    | '/design/'
    | '/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DesignRoute: typeof DesignRouteWithChildren
  PostsRoute: typeof PostsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DesignRoute: DesignRouteWithChildren,
  PostsRoute: PostsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/design",
        "/posts"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/design": {
      "filePath": "design.tsx",
      "children": [
        "/design/button",
        "/design/tooltip",
        "/design/"
      ]
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/design/button": {
      "filePath": "design.button.tsx",
      "parent": "/design"
    },
    "/design/tooltip": {
      "filePath": "design.tooltip.tsx",
      "parent": "/design"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/design/": {
      "filePath": "design.index.tsx",
      "parent": "/design"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    }
  }
}
ROUTE_MANIFEST_END */
